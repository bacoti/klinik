import React, { useState, useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import DashboardLayout from "@/components/layouts/DashboardLayout";
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
    Users,
    Calendar,
    Activity,
    Stethoscope,
    Clock,
    UserCheck,
    Plus,
    ArrowRight,
    Bell,
    AlertTriangle,
} from "lucide-react";

interface DashboardStats {
    patients: {
        total: number;
        today: number;
        pending: number;
    };
    appointments: {
        total: number;
        today: number;
        upcoming: number;
    };
    examinations: {
        completed: number;
        pending: number;
    };
    pharmacy: {
        prescriptions: number;
        stock_alerts: number;
    };
}

interface QuickAction {
    label: string;
    icon: React.ReactNode;
    href: string;
    color: string;
    description: string;
    roles: string[];
}

interface RecentActivity {
    id: string;
    type: "appointment" | "examination" | "prescription" | "registration";
    message: string;
    time: string;
    status: "success" | "pending" | "warning";
}

const DashboardPage: React.FC = () => {
    const { user } = useAuth();
    const [stats, setStats] = useState<DashboardStats | null>(null);
    const [recentActivities, setRecentActivities] = useState<RecentActivity[]>(
        []
    );
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // Quick actions berdasarkan role - prinsip personalization
    const quickActions: QuickAction[] = [
        {
            label: "Daftar Pasien Baru",
            icon: <UserCheck className="w-5 h-5" />,
            href: "/patients/register",
            color: "bg-blue-500 hover:bg-blue-600",
            description: "Daftarkan pasien baru ke sistem",
            roles: ["admin", "nurse"],
        },
        {
            label: "Jadwal Hari Ini",
            icon: <Calendar className="w-5 h-5" />,
            href: "/appointments/today",
            color: "bg-green-500 hover:bg-green-600",
            description: "Lihat jadwal pemeriksaan hari ini",
            roles: ["admin", "doctor", "nurse"],
        },
        {
            label: "Skrining Pasien",
            icon: <Activity className="w-5 h-5" />,
            href: "/screenings/new",
            color: "bg-orange-500 hover:bg-orange-600",
            description: "Lakukan skrining awal pasien",
            roles: ["nurse"],
        },
        {
            label: "Pemeriksaan",
            icon: <Stethoscope className="w-5 h-5" />,
            href: "/examinations",
            color: "bg-purple-500 hover:bg-purple-600",
            description: "Kelola pemeriksaan medis",
            roles: ["doctor"],
        },
        {
            label: "Apotek",
            icon: <Plus className="w-5 h-5" />,
            href: "/pharmacy",
            color: "bg-teal-500 hover:bg-teal-600",
            description: "Kelola resep dan stok obat",
            roles: ["pharmacist", "admin"],
        },
    ];

    const filteredQuickActions = quickActions.filter((action) =>
        action.roles.includes((user?.role as unknown as string) || "")
    );

    useEffect(() => {
        fetchDashboardData();
    }, []);

    const fetchDashboardData = async () => {
        try {
            setLoading(true);
            // TODO: Replace with actual API calls

            // Mock data untuk demonstrasi
            const mockStats: DashboardStats = {
                patients: { total: 1247, today: 23, pending: 8 },
                appointments: { total: 156, today: 12, upcoming: 45 },
                examinations: { completed: 89, pending: 7 },
                pharmacy: { prescriptions: 34, stock_alerts: 3 },
            };

            const mockActivities: RecentActivity[] = [
                {
                    id: "1",
                    type: "registration",
                    message: "Pasien baru Maria Silva telah terdaftar",
                    time: "10 menit yang lalu",
                    status: "success",
                },
                {
                    id: "2",
                    type: "appointment",
                    message: "Jadwal pemeriksaan Dr. Ahmad pada 14:00",
                    time: "30 menit yang lalu",
                    status: "pending",
                },
                {
                    id: "3",
                    type: "examination",
                    message: "Pemeriksaan Ahmad Fauzi telah selesai",
                    time: "1 jam yang lalu",
                    status: "success",
                },
                {
                    id: "4",
                    type: "prescription",
                    message: "Stok Paracetamol menipis (< 50 unit)",
                    time: "2 jam yang lalu",
                    status: "warning",
                },
            ];

            setStats(mockStats);
            setRecentActivities(mockActivities);
        } catch (err: any) {
            setError("Gagal memuat data dashboard");
        } finally {
            setLoading(false);
        }
    };

    const getGreeting = () => {
        const hour = new Date().getHours();
        if (hour < 12) return "Selamat Pagi";
        if (hour < 17) return "Selamat Siang";
        return "Selamat Sore";
    };

    const getRoleTitle = (role: string) => {
        const roleTitles = {
            admin: "Administrator",
            doctor: "Dokter",
            nurse: "Perawat",
            pharmacist: "Apoteker",
            patient: "Pasien",
        };
        return roleTitles[role as keyof typeof roleTitles] || "Pengguna";
    };

    const getActivityIcon = (type: string) => {
        const icons = {
            appointment: <Calendar className="w-4 h-4" />,
            examination: <Stethoscope className="w-4 h-4" />,
            prescription: <Plus className="w-4 h-4" />,
            registration: <UserCheck className="w-4 h-4" />,
        };
        return (
            icons[type as keyof typeof icons] || (
                <Activity className="w-4 h-4" />
            )
        );
    };

    const getStatusColor = (status: string) => {
        const colors = {
            success: "text-green-600 bg-green-50",
            pending: "text-yellow-600 bg-yellow-50",
            warning: "text-red-600 bg-red-50",
        };
        return (
            colors[status as keyof typeof colors] || "text-gray-600 bg-gray-50"
        );
    };

    if (loading) {
        return (
            <DashboardLayout>
                <div className="space-y-6">
                    {/* Loading skeletons */}
                    <div className="animate-pulse">
                        <div className="h-8 bg-gray-200 rounded w-1/3 mb-4"></div>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                            {[...Array(4)].map((_, i) => (
                                <div
                                    key={i}
                                    className="h-32 bg-gray-200 rounded-lg"
                                ></div>
                            ))}
                        </div>
                    </div>
                </div>
            </DashboardLayout>
        );
    }

    return (
        <DashboardLayout>
            <div className="space-y-6">
                {/* Welcome Header */}
                <div className="bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg p-6 text-white">
                    <h1 className="text-2xl font-bold mb-2">
                        {getGreeting()}, {user?.name}!
                    </h1>
                    <p className="text-blue-100">
                        Selamat datang kembali di Sistem Informasi Klinik -{" "}
                        {getRoleTitle((user?.role as unknown as string) || "")}
                    </p>
                </div>

                {/* Error Alert */}
                {error && (
                    <Alert variant="destructive">
                        <AlertTriangle className="h-4 w-4" />
                        <AlertDescription>{error}</AlertDescription>
                    </Alert>
                )}

                {/* Stats Cards */}
                {stats && (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                        {/* Total Patients */}
                        <Card>
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                <CardTitle className="text-sm font-medium">
                                    Total Pasien
                                </CardTitle>
                                <Users className="h-4 w-4 text-muted-foreground" />
                            </CardHeader>
                            <CardContent>
                                <div className="text-2xl font-bold">
                                    {stats.patients.total.toLocaleString(
                                        "id-ID"
                                    )}
                                </div>
                                <p className="text-xs text-muted-foreground">
                                    +{stats.patients.today} pasien hari ini
                                </p>
                            </CardContent>
                        </Card>

                        {/* Today's Appointments */}
                        <Card>
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                <CardTitle className="text-sm font-medium">
                                    Jadwal Hari Ini
                                </CardTitle>
                                <Calendar className="h-4 w-4 text-muted-foreground" />
                            </CardHeader>
                            <CardContent>
                                <div className="text-2xl font-bold">
                                    {stats.appointments.today}
                                </div>
                                <p className="text-xs text-muted-foreground">
                                    {stats.appointments.upcoming} jadwal
                                    mendatang
                                </p>
                            </CardContent>
                        </Card>

                        {/* Pending Examinations */}
                        <Card>
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                <CardTitle className="text-sm font-medium">
                                    Pemeriksaan
                                </CardTitle>
                                <Stethoscope className="h-4 w-4 text-muted-foreground" />
                            </CardHeader>
                            <CardContent>
                                <div className="text-2xl font-bold">
                                    {stats.examinations.pending}
                                </div>
                                <p className="text-xs text-muted-foreground">
                                    Menunggu pemeriksaan
                                </p>
                            </CardContent>
                        </Card>

                        {/* Pharmacy Alerts */}
                        <Card>
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                <CardTitle className="text-sm font-medium">
                                    Apotek
                                </CardTitle>
                                <Bell className="h-4 w-4 text-muted-foreground" />
                            </CardHeader>
                            <CardContent>
                                <div className="text-2xl font-bold">
                                    {stats.pharmacy.stock_alerts}
                                </div>
                                <p className="text-xs text-muted-foreground">
                                    Peringatan stok obat
                                </p>
                            </CardContent>
                        </Card>
                    </div>
                )}

                {/* Quick Actions - Role-based */}
                <Card>
                    <CardHeader>
                        <CardTitle>Aksi Cepat</CardTitle>
                        <CardDescription>
                            Fitur yang sering digunakan berdasarkan peran Anda
                        </CardDescription>
                    </CardHeader>
                    <CardContent>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            {filteredQuickActions.map((action, index) => (
                                <Button
                                    key={index}
                                    variant="outline"
                                    className={`h-auto p-4 ${action.color} text-white border-0 hover:scale-105 transition-transform`}
                                    onClick={() =>
                                        (window.location.href = action.href)
                                    }
                                >
                                    <div className="flex items-start space-x-3 w-full">
                                        <div className="flex-shrink-0">
                                            {action.icon}
                                        </div>
                                        <div className="flex-1 text-left">
                                            <h3 className="font-medium">
                                                {action.label}
                                            </h3>
                                            <p className="text-sm opacity-90 mt-1">
                                                {action.description}
                                            </p>
                                        </div>
                                        <ArrowRight className="w-4 h-4 flex-shrink-0" />
                                    </div>
                                </Button>
                            ))}
                        </div>
                    </CardContent>
                </Card>

                {/* Recent Activities */}
                <Card>
                    <CardHeader>
                        <CardTitle>Aktivitas Terbaru</CardTitle>
                        <CardDescription>
                            Pembaruan terbaru dari sistem klinik
                        </CardDescription>
                    </CardHeader>
                    <CardContent>
                        <div className="space-y-4">
                            {recentActivities.length > 0 ? (
                                recentActivities.map((activity) => (
                                    <div
                                        key={activity.id}
                                        className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg"
                                    >
                                        <div
                                            className={`p-2 rounded-full ${getStatusColor(
                                                activity.status
                                            )}`}
                                        >
                                            {getActivityIcon(activity.type)}
                                        </div>
                                        <div className="flex-1">
                                            <p className="text-sm font-medium text-gray-900">
                                                {activity.message}
                                            </p>
                                            <p className="text-xs text-gray-500">
                                                {activity.time}
                                            </p>
                                        </div>
                                    </div>
                                ))
                            ) : (
                                <div className="text-center py-8 text-gray-500">
                                    <Clock className="w-8 h-8 mx-auto mb-2 opacity-50" />
                                    <p>Belum ada aktivitas terbaru</p>
                                </div>
                            )}
                        </div>
                    </CardContent>
                </Card>
            </div>
        </DashboardLayout>
    );
};

export default DashboardPage;
